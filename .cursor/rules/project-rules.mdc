---
description: 'Portfolio project coding rules and design system'
globs: ['**/*']
alwaysApply: true
---

# === Core Principles ===

## Project Philosophy

- **Hybrid Approach**: Merges v0 template foundation with legacy portfolio components
- **Design System First**: All styling must use unified Tailwind + tweakcn theme system
- **Component Composition**: Prefer shadcn/ui and Next components over native HTML elements
- **Content Separation**: Store dynamic content in JSON files for maintainability

## Data Management

- Store content data (projects, Journey, testimonials) in `/src/data/*.json` files
- Use TypeScript interfaces for type safety
- Separate data from presentation logic for easier updates

# === Code Standards ===

## Component Guidelines

- **Always prefer shadcn/ui** components over raw HTML elements
- **Use proper composition**: `<Button asChild><Link href="/login">Login</Link></Button>`
- **Next.js components**: Use Link, Image, Head instead of HTML equivalents
- **File organization**: One component per file, PascalCase filenames
- **Import order**: 3rd party → shadcn/ui → local components → styles

# === Design System ===

## Layout Standards

- **Spacing**: Use global Tailwind utilities or custom utilities from `globals.css`/`tailwind.config.ts`
- **Reusability**: Avoid one-off classes; prefer reusable config tokens
- **Theming**: Use tweakcn for colors, next-themes for dark/light switching
- **Performance**: No flash/hydration issues during theme switching
- **Consistency**: Navbar, sections, footer share horizontal padding and max-width
- **Grid Layout**: Footer uses 1 col-6 + 2 col-3s CSS grid
- **Responsive**: Mobile-first design across all breakpoints

# === Component Architecture ===

## Organization

- **Structure**: `components/ui`, `components/layout`, `components/sections`
- **Reusability**: Reuse base UI elements, avoid style duplication
- **Single Purpose**: Each component serves one clear purpose
- **Composition**: Prefer composition over prop overload
- **Logic Extraction**: Move shared logic to `/lib` or `/hooks`

# === Code Quality ===

## Best Practices

- **Naming**: camelCase (utils), PascalCase (components), kebab-case (Tailwind & CSS classes)
- **Avoid**: Magic numbers and inline styles
- **Imports**: Clean, logical grouping
- **Documentation**: Concise comments for non-obvious logic
- **Testing**: QA theme switching and responsiveness before merging

# === AI Assistant Guidelines ===

## Code Generation

- **Always apply** these rules when generating or refactoring code
- **New components**: Ensure compliance with spacing, theming, and responsive structure
- **Legacy integration**: Refactor old components to use design system tokens and shadcn/ui primitives
- **Consistency**: Maintain unified design system across all implementations

# === Theme Integration ===

theme:

- Use CSS custom properties from `globals.css` for all color values
- Reference theme variables in Tailwind config for consistent theming
- Prefer gradients that combine primary and secondary theme colors via CSS variables
- Default to dark mode with system preference detection
- Ensure no flash/hydration issues during theme switching
