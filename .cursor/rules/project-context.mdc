---
description: 'Portfolio project context and structure information'
globs: ['**/*']
alwaysApply: true
---

Always reference and adhere to `.cursor/rules` when generating or modifying code.

# === Project Architecture ===

## Source Structure

This project merges bits and pieces from two sources:

- `/context/old-portfolio/` → legacy components and content
- `/context/new-template/` → refined v0 base start template

Final production code lives in `/src/` and must follow the unified design system defined in `.cursor/rules`.

## Tech Stack

- **Framework**: Next.js 14 with App Router
- **Styling**: Tailwind CSS + tweakcn theme system
- **Components**: shadcn/ui component library
- **Theme**: next-themes with dark/light mode support
- **Icons**: Lucide React + React Icons
- **Animations**: Framer Motion
- **Data**: JSON files in `/src/data/` for content management

## Key Directories

- `/src/components/ui/` - shadcn/ui components
- `/src/components/layout/` - Layout components (Header, Footer, etc.)
- `/src/components/sections/` - Page sections (Hero, About, etc.)
- `/src/data/` - Content data (projects, timeline, testimonials)
- `/src/lib/` - Utilities and shared logic
- `/src/hooks/` - Custom React hooks

## Design System Integration

When refactoring or generating new code:

- Use shadcn/ui components over native elements (styled per our brand system)
- Use Next.js components (Link, Image, Head) over HTML equivalents
- All styling, spacing, and theming must come from the global Tailwind design system
- Reference theme variables from `globals.css` for consistent color usage
- Implement responsive design with mobile-first approach
- Use CSS custom properties for theme-aware styling

## Content Management

- Store dynamic content in JSON files under `/src/data/`
- Use TypeScript interfaces for content type safety
- Separate data from presentation logic for maintainability
